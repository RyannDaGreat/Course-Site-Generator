1. Make IO work. Must be able to load XML properties.
2. GUI Buttons/Tab Switching Etc
3. Loading/Saving Files



1. CHECKPOINT: Got Yes/No/Cancel and File IO dialogs working
Everything is either public or private. No package-private or protected Bullcrud.
You should only edit files in the _App_ package if that java file is the only file in its package

TODO: Enable the custom CSS font once java is done etc

ADVANTAGES OF MY WAY:
My columns for the TA's cant be dragged off screen like McKenna's could.
You can do the entire thing in Intellij without switching to netbeans just to run the code; and thus you can use the killall java command more liberally.
Also learning tons about JavaFX, for example the uses of extending VBox etc
I can use a graphic GUI designer and compile it to java code
Discovering a lot of McKenna's rasons by seeing what doesn't work such as not using titled panes and instead just using anchor panes
Just decided I'm going to try and minimize the amount of different types of JavaFX components that I'm using


Arbitrary elements: Combobox/Button widths
Padding sizes

Rightnow one of my biggest priorities is making sure the window 'scales' properly; in other words not having buttons intersect each other or go off the screen etc. I decided to make it as parametric as possible; almost always using 'USE_COMOUTED_WIDTH' if I can, and adding a scroll bar in case it can't handle it (computes width makes it as small as possible, which is good)
No longer using toolbar ecause anchors are easier to use



AGENDA:

Implement Checkboxes and stuff
Make physical GUI
Make XML Loader and language choice
Wrap it all up (last hour)

*My app has better icons. Took high resolution snapshots of the glyphicons, put them in photoshop, and made them have transparency for easier styling.
Mine has tons of scroll panes and a split pane for TA data, which I think makes it a much much better GUI especially because it scales properly
You can't drag my TAData tablview splitters off screen, like you can with McKennas
By using the netbeans plugin I was able to explore more possibilities for the GUI, though it did distract me a lot...it looks wonderful though


EXTRACTION:

Using eclipse to 'Externalize Strings' of output of netbeans compiler of javafx code to java .properties file
